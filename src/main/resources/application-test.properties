
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.jpa.properties.hibernate.format_sql=true
####upload
upload.path = file://${user.home}
upload.url=https://192.168.1.24
upload.urlSchema=127.0.0.1
spring.jpa.hibernate.ddl-auto=update
##micro service config
spring.cloud.config.uri=http://localhost:8888
#eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
# Hibernate props
spring.jpa.show-sql = true
hibernate.metadata_builder_contributor=com.vladmihalcea.book.hpjp.SqlFunctionsMetadataBuilderContributor
#le nom application.properties pour le micro-service c'est sa configuration, donc on a renomm? le fichier ? bootstap.properties pour booter sur ce fichier
#il lit les propori?t?s(avant le d?marrage) puis il envoit une requete vers l'uri qu'il a trouver pour recuperer sa config et completer de demarrage
#actuator:consulter ? chaud ce qui se passe ds l'application(les requetes,etat de la memoire(le nombre de classe charg? en m?moire,..), et
# permet de rafraichir la configuration d'un micro-service: lorsque on modifie un parametre de config
#on envoit une requete POST vers actuator: http://localhost:8081/actuator/refresh: pour demande au micro-service de se rafraichir
## config images
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB
spring.messages.basename=i18n/messages