server.port=8089

#donner au micro-service l'uri de la config qu'il va recuperer(dq il va demarrer, il envoit une requete http vers http://localhost:888+/+le nom(spring.application.name=company-service)
#spring.cloud.config.uri=http://localhost:8888
#activer tous les end point qui sont exposé par actuator
#management.endpoints.web.exposure.include=*

spring.datasource.url= jdbc:postgresql://localhost:5432/dbTanitTraining?currentSchema=public
spring.datasource.username= postgres
spring.datasource.password= postgres

upload.path = file://${user.home}
upload.url=http://192.168.1.24:8086

upload.urlSchema=localhost
upload.urlSchemaDatabase=127.0.0.1

#####spring.cloud.config.uri=http://${SERVER_CONFG}:8888
#####eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
#####spring.datasource.url= jdbc:postgresql://${DB_SERVER}/${POSTGRES_DB}?currentSchema=public
#####spring.datasource.username=${POSTGRES_USER}
#####spring.datasource.password=${POSTGRES_PASSWORD}


#logging.level.org.springframework.web=DEBUG

#logging.level.root=warn
#logging.level.org.springframework.web=debug
#logging.level.org.hibernate=error
#logging.file.name=uuuu




#driverClassName: com.mysql.cj.jdbc.Driver
driverClassName:org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update


spring.jpa.properties.hibernate.jdbc.time_zone=UTC



# Hibernate props
spring.jpa.show-sql = true

hibernate.dialect=org.hibernate.dialect.PostgreSQL92Dialect
spring.datasource.driverClassName = org.postgresql.Driver

hibernate.metadata_builder_contributor=com.vladmihalcea.book.hpjp.SqlFunctionsMetadataBuilderContributor


#le nom application.properties pour le micro-service c'est sa configuration, donc on a renommé le fichier à bootstap.properties pour booter sur ce fichier
#il lit les proporiétés(avant le démarrage) puis il envoit une requete vers l'uri qu'il a trouver pour recuperer sa config et completer de demarrage



#actuator:consulter à chaud ce qui se passe ds l'application(les requetes,etat de la memoire(le nombre de classe chargé en mémoire,..), et
# permet de rafraichir la configuration d'un micro-service: lorsque on modifie un parametre de config
#on envoit une requete POST vers actuator: http://localhost:8081/actuator/refresh: pour demande au micro-service de se rafraichir

## config images
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=3MB
spring.servlet.multipart.max-request-size=3MB

spring.messages.basename=i18n/messages

#spring.data.rest.default-page-size=10000


################Email#~#######"
#spring.mail.host=smtp.gmail.com
#spring.smtp.port=465
#spring.mail.username=compaktor.info@gmail.com
#spring.mail.password=lxqmygvrwlefkqlw
####spring.mail.tls=true
## Other properties
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.connectiontimeout=5000
#spring.mail.properties.mail.smtp.timeout=5000
#spring.mail.properties.mail.smtp.writetimeout=5000
## TLS , port 587
#spring.mail.properties.mail.smtp.starttls.enable=true




maps-it.mail.enabled=false
##maps-it.mail.from=moo3in.com.app@gmail.com
maps-it.mail.from=compaktor.info@gmail.com
maps-it.mail.pwd=lxqmygvrwlefkqlw
maps-it.mail.base-url=http://127.0.0.1:4200
        s

